
import javax.swing.*;
import java.awt.event.*;
import java.sql.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class LoginForm extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form LoginForm
     */
    public LoginForm() {
        initComponents();
        this.setTitle("Passvault - Password Manager");
//        usernameTF.setPlaceholder("Enter username");
        actionEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        usernameTF = new javax.swing.JTextField();
        signupBtn = new javax.swing.JButton();
        signinBtn = new javax.swing.JButton();
        passwordTF = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 102, 255));

        jPanel1.setBackground(new java.awt.Color(227, 242, 253));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        usernameTF.setFont(new java.awt.Font("Inter", 0, 14)); // NOI18N
        usernameTF.setToolTipText("");
        usernameTF.setName(""); // NOI18N
        usernameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTFActionPerformed(evt);
            }
        });
        jPanel1.add(usernameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 200, 30));

        signupBtn.setBackground(new java.awt.Color(38, 127, 255));
        signupBtn.setFont(new java.awt.Font("Inter", 1, 14)); // NOI18N
        signupBtn.setForeground(new java.awt.Color(255, 255, 255));
        signupBtn.setText("Sign Up");
        signupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupBtnActionPerformed(evt);
            }
        });
        jPanel1.add(signupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 365, 90, 30));

        signinBtn.setBackground(new java.awt.Color(38, 127, 255));
        signinBtn.setFont(new java.awt.Font("Inter", 1, 14)); // NOI18N
        signinBtn.setForeground(new java.awt.Color(255, 255, 255));
        signinBtn.setText("Sign In");
        jPanel1.add(signinBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 365, 90, 30));

        passwordTF.setFont(new java.awt.Font("Inter", 0, 14)); // NOI18N
        jPanel1.add(passwordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 315, 200, 31));

        jLabel2.setBackground(new java.awt.Color(38, 127, 255));
        jLabel2.setFont(new java.awt.Font("Segoe Script", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(38, 127, 255));
        jLabel2.setText("Welcome");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel2.setFocusable(false);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, -1, -1));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Inter", 1, 14)); // NOI18N
        jLabel3.setText("Username :");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel3.setFocusable(false);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 225, 80, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Inter", 1, 14)); // NOI18N
        jLabel4.setText("Password :");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel4.setFocusable(false);
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 80, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bg.png"))); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 135, 310, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_signupBtnActionPerformed

    private void usernameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public void actionEvent() {
        signupBtn.addActionListener(this);
        signinBtn.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == signupBtn) {
            String username = usernameTF.getText();
            String password = passwordTF.getText();
            if (password.length() < 16) {
                JOptionPane.showMessageDialog(null, "Password too short");
                usernameTF.setText("");
                passwordTF.setText("");
                return;
            }
            Hashing hashing = new Hashing();
            String hashUsername = hashing.hashMethod(username);
            String hashPassword = hashing.hashMethod(password);
            try {
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mprdb", "root",
                        "passvaultsql");
                // Preapared Statement
                PreparedStatement Pstatement = connection.prepareStatement("insert into userCred(username, password) values(?,?)");
                // Specifying the values of it's parameter
                Pstatement.setString(1, hashUsername);
                Pstatement.setString(2, hashPassword);
                Pstatement.executeUpdate();

                PreparedStatement PCreatestatement = connection.prepareStatement("create table " + hashUsername + "(accId int primary key auto_increment,"
                        + "        webName varchar(50) not null,"
                        + "        webUsername varchar(50),"
                        + "        webPassword varchar(50) not null,"
                        + "        URL varchar(50),"
                        + "        constraint user_info unique(webName, webUsername))");
                PCreatestatement.executeUpdate();

                JOptionPane.showMessageDialog(null, "Data Registered Successfully");
                dispose(); // close login page
                Dashboard db = new Dashboard(username, password);
                db.show();
                connection.close();
            } catch (SQLException e1) {
                e1.printStackTrace();
                if (e1.getMessage().contains("Duplicate entry")) {
                    JOptionPane.showMessageDialog(null, "Username not available");
                    usernameTF.setText("");
                    passwordTF.setText("");
                }
            }
        }
        if (e.getSource() == signinBtn) {
            String username = usernameTF.getText();
            String password = passwordTF.getText();
            Hashing hashing = new Hashing();
            SHA1 s1 = new SHA1();
            String hashUsername = s1.hashMethod(username);
            String hashPassword = hashing.hashMethod(password);
            try {
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mprdb", "root",
                        "passvaultsql");

                Statement stm = connection.createStatement();
//mysql query to run
                String sql = "select * from userCred having username = '" + hashUsername + "' and password = '" + hashPassword + "'";
                ResultSet rs = stm.executeQuery(sql);
                if (rs.next()) {
                    //if username and password is true than go to Homepage
                    dispose(); // close login page
                    Dashboard db = new Dashboard(username, password);
                    db.show();
                } else {
                    JOptionPane.showMessageDialog(this, "Incorrect credentials");
                    usernameTF.setText("");
                    passwordTF.setText("");
                }

            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Basic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordTF;
    private javax.swing.JButton signinBtn;
    private javax.swing.JButton signupBtn;
    private javax.swing.JTextField usernameTF;
    // End of variables declaration//GEN-END:variables
}

class Hashing {

    public static byte[] getSHA(String input) throws NoSuchAlgorithmException {
        // Static getInstance method is called with hashing SHA
        MessageDigest md = MessageDigest.getInstance("SHA-256");

        // digest() method called
        // to calculate message digest of an input
        // and return array of byte
        return md.digest(input.getBytes(StandardCharsets.UTF_8));
    }

    public static String toHexString(byte[] hash) {
        // Convert byte array into signum representation
        BigInteger number = new BigInteger(1, hash);

        // Convert message digest into hex value
        StringBuilder hexString = new StringBuilder(number.toString(16));

        // Pad with leading zeros
        while (hexString.length() < 64) {
            hexString.insert(0, '0');
        }

        return hexString.toString();
    }

    // Driver code
    public static String hashMethod(String password) {
        try {
            return toHexString(getSHA(password));
        } // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            System.out.println("Exception thrown for incorrect algorithm: " + e);
        }
        return "0";
    }
}

class SHA1 extends Hashing{
    public static byte[] getSHA(String input) throws NoSuchAlgorithmException {
        // Static getInstance method is called with hashing SHA
        MessageDigest md = MessageDigest.getInstance("SHA-1");

        // digest() method called
        // to calculate message digest of an input
        // and return array of byte
        return md.digest(input.getBytes(StandardCharsets.UTF_8));
    }
}
